package com.example.studdata.service.impl;

import com.example.studdata.dao.*;
import com.example.studdata.model.*;
import com.example.studdata.service.StudentService;
import com.example.studdata.util.ApplicationMetrics;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import jakarta.persistence.EntityNotFoundException;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
public class StudentServiceImpl implements StudentService {

    private final StudentRepository repository;
    private final ApplicationMetrics applicationMetrics;


    @Autowired
    private FacultyRepository facultyRepository;

    @Autowired
    private ScholarshipRepository scholarshipRepository;

    @Autowired
    private FoundationRepository foundationRepository;

    @Autowired
    private StudyFormRepository studyFormRepository;

    @Override
    public List<Faculty> findAllFaculties() {
        return facultyRepository.findAll();
    }

    @Override
    public List<Scholarship> findAllScholarships() {
        return scholarshipRepository.findAll();
    }

    @Override
    public List<Foundation> findAllFoundations() {
        return foundationRepository.findAll();
    }

    @Override
    public List<StudyForm> findAllStudyForms() {
        return studyFormRepository.findAll();
    }

    @Override
    public Faculty findFacultyById(Long id) {
        return facultyRepository.findById(id).orElseThrow();
    }

    @Override
    public Scholarship findScholarshipById(Long id) {
        return scholarshipRepository.findById(id).orElseThrow();
    }

    @Override
    public Foundation findFoundationById(Long id) {
        return foundationRepository.findById(id).orElseThrow();
    }

    @Override
    public StudyForm findStudyFormById(Long id) {
        return studyFormRepository.findById(id).orElseThrow();
    }


    @Override
    @Transactional(readOnly = true)
    public List<Student> findAllStudent() {
        log.debug("–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤");
        return repository.findAll();
    }

    @Override
    @Transactional
    public Student saveStudent(Student student) {
        log.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞: {} {}", student.getLastName(), student.getFirstName());

        validateStudent(student);

        Student savedStudent = repository.save(student);
        applicationMetrics.incrementStudentCreatedCounter();

        log.info("–°—Ç—É–¥–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {}", savedStudent.getId());
        return savedStudent;
    }

    @Override
    @Transactional
    public Student updateStudent(Student student) {
        log.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å ID: {}", student.getId());

        if (!repository.existsById(student.getId())) {
            throw new EntityNotFoundException("–°—Ç—É–¥–µ–Ω—Ç —Å ID " + student.getId() + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        validateStudent(student);

        Student updatedStudent = repository.save(student);
        applicationMetrics.incrementStudentUpdatedCounter();

        log.info("–°—Ç—É–¥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {}", updatedStudent.getId());
        return updatedStudent;
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findStudentsByFoundationEndDateBeforeOrEqual(LocalDate currentDate) {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–æ: {}", currentDate);
        return repository.findStudentsByFoundationEndDateBeforeOrEqual(currentDate);
    }

    @Override
    @Transactional
    public void deleteStudent(Student student) {
        log.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞: {} {}", student.getLastName(), student.getFirstName());
        repository.delete(student);
        applicationMetrics.incrementStudentDeletedCounter();
    }

    @Override
    @Transactional
    public void deleteStudentById(Long id) {
        log.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID: {}", id);

        if (!repository.existsById(id)) {
            throw new EntityNotFoundException("–°—Ç—É–¥–µ–Ω—Ç —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        repository.deleteById(id);
        applicationMetrics.incrementStudentDeletedCounter();
    }

    @Override
    @Transactional(readOnly = true)
    public boolean existsStudentsById(Long id) {
        return repository.existsById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Student> findStudentById(Long id) {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID: {}", id);
        return repository.findById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findStudentsByIds(List<Long> ids) {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ ID: {}", ids);
        return repository.findAllById(ids);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findStudentsByNameOrOrderNumber(String searchTerm) {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –§–ò–û –∏–ª–∏ –Ω–æ–º–µ—Ä—É –ø—Ä–∏–∫–∞–∑–∞: {}", searchTerm);
        return repository.findStudentsByNameOrOrderNumber(searchTerm);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findAll(Specification<Student> spec, Sort sort) {
        return repository.findAll(spec, sort);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findAll(Specification<Student> spec) {
        return repository.findAll(spec);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findStudentsByIssuanceEndDateAfter(LocalDate currentDate) {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ: {}", currentDate);
        return repository.findStudentsByIssuanceEndDateAfter(currentDate);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findStudentsByIssuanceEndDateBeforeOrEqual(LocalDate currentDate) {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –¥–æ: {}", currentDate);
        return repository.findStudentsByIssuanceEndDateBeforeOrEqual(currentDate);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findStudentsWithFoundationEndingInWeek(LocalDate startDate, LocalDate endDate) {
        log.info("üîç –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É {} –∏ {}", startDate, endDate);
        List<Student> students = repository.findStudentsWithFoundationEndingInWeek(startDate, endDate);
        log.info("üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {}", students.size());

        students.forEach(student ->
                log.debug("üë§ –°—Ç—É–¥–µ–Ω—Ç: {} {}, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {}, –±–µ—Å—Å—Ä–æ—á–Ω–æ: {}",
                        student.getLastName(), student.getFirstName(),
                        student.getFoundationEndDate(), student.getIsPermanent()));

        return students;
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findByFacultyId(Long facultyId) {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É: {}", facultyId);
        return repository.findByFacultyId(facultyId);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findByCourse(int course) {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É: {}", course);
        return repository.findByCourse(course);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findPermanentStudents() {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –±–µ—Å—Å—Ä–æ—á–Ω—ã–º –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º");
        return repository.findPermanentStudents();
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Student> findByOrderNumber(String orderNumber) {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –ø—Ä–∏–∫–∞–∑–∞: {}", orderNumber);
        return repository.findByOrderNumber(orderNumber);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Student> findByCreatedDateBetween(LocalDate startDate, LocalDate endDate) {
        log.debug("–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É {} –∏ {}", startDate, endDate);
        return repository.findByCreatedDateBetween(startDate, endDate);
    }

    @Override
    @Transactional(readOnly = true)
    public long count() {
        return repository.count();
    }

    @Override
    @Transactional(readOnly = true)
    public long countByFacultyId(Long facultyId) {
        return repository.countByFacultyId(facultyId);
    }

//    @Override
//    public boolean isOrderNumberUnique(String orderNumber, Long excludeId) {
//        Optional<Student> existing = repository.findByOrderNumber(orderNumber);
//        if (existing.isEmpty()) {
//            return true;
//        }
//        return excludeId != null && existing.get().getId().equals(excludeId);
//    }

    @Override
    public void validateStudent(Student student) {
        if (student.getFirstName() == null || student.getFirstName().trim().isEmpty()) {
            throw new IllegalArgumentException("–ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
        }
        if (student.getLastName() == null || student.getLastName().trim().isEmpty()) {
            throw new IllegalArgumentException("–§–∞–º–∏–ª–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞");
        }
        if (student.getCourse() < 1 || student.getCourse() > 6) {
            throw new IllegalArgumentException("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 6");
        }
        if (student.getOrderNumber() == null || student.getOrderNumber().trim().isEmpty()) {
            throw new IllegalArgumentException("–ù–æ–º–µ—Ä –ø—Ä–∏–∫–∞–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
        }
        // if (!isOrderNumberUnique(student.getOrderNumber(), student.getId())) {
        //     throw new IllegalArgumentException("–ù–æ–º–µ—Ä –ø—Ä–∏–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º");
        // }
        if (student.getIssuanceEndDate() == null) {
            throw new IllegalArgumentException("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞");
        }
        if (student.getFaculty() == null) {
            throw new IllegalArgumentException("–§–∞–∫—É–ª—å—Ç–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
        }
        if (student.getStudyForm() == null) {
            throw new IllegalArgumentException("–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞");
        }
        if (student.getScholarship() == null) {
            throw new IllegalArgumentException("–°—Ç–∏–ø–µ–Ω–¥–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞");
        }
        if (student.getFoundation() == null) {
            throw new IllegalArgumentException("–û—Å–Ω–æ–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
        }
    }
}