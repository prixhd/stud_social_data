package com.example.studdata.service;

import com.example.studdata.config.AppConfig;
import com.example.studdata.model.Student;
import com.example.studdata.util.ApplicationMetrics;
import io.micrometer.core.instrument.Timer;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class ExcelExportService {

    private final AppConfig appConfig;
    private final ApplicationMetrics applicationMetrics;

    public String exportToExcel(List<Student> students) {
        Timer.Sample sample = null;
        String filePath = null;

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –º–µ—Ç—Ä–∏–∫
            sample = applicationMetrics.startExportTimer();
            log.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞");

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            validateInput(students);
            log.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");

            // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            filePath = createExportPath();
            log.info("‚úÖ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ–∑–¥–∞–Ω: {}", filePath);

            // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            createExcelFile(students, filePath);
            log.info("‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {}", filePath);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
            validateCreatedFile(filePath);
            log.info("‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é");

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
            applicationMetrics.incrementExportCounter();
            log.info("üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {} –∑–∞–ø–∏—Å–µ–π", students.size());

            return filePath;

        } catch (IllegalArgumentException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " + e.getMessage(), e);
        } catch (IOException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: " + e.getMessage(), e);
        } catch (Exception e) {
            log.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel: {}", e.getMessage(), e);
            // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            cleanupFile(filePath);
            throw new RuntimeException("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: " + e.getMessage(), e);
        } finally {
            if (sample != null) {
                applicationMetrics.stopExportTimer(sample);
            }
        }
    }

    private void validateInput(List<Student> students) {
        if (students == null) {
            throw new IllegalArgumentException("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }

        if (students.isEmpty()) {
            throw new IllegalArgumentException("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        if (students.size() > appConfig.getMaxExportRecords()) {
            throw new IllegalArgumentException(
                    String.format("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: %d. –ú–∞–∫—Å–∏–º—É–º: %d",
                            students.size(), appConfig.getMaxExportRecords())
            );
        }

        log.debug("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è {} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", students.size());
    }

    private String createExportPath() throws IOException {
        try {
            String userHome = System.getProperty("user.home");
            if (userHome == null || userHome.trim().isEmpty()) {
                throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }

            String[] pathParts = appConfig.getExportPath().split("/");
            Path exportDir = Paths.get(userHome, pathParts);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try {
                Files.createDirectories(exportDir);
                log.debug("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {}", exportDir.toAbsolutePath());
            } catch (IOException e) {
                throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: " + exportDir, e);
            }

            // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
            String timestamp;
            try {
                timestamp = LocalDateTime.now().format(
                        DateTimeFormatter.ofPattern(appConfig.getDateFormat())
                );
            } catch (Exception e) {
                log.warn("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º default: {}", e.getMessage());
                timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss"));
            }

            String fileName = String.format("students_export_%s.xlsx", timestamp);
            Path filePath = exportDir.resolve(fileName);

            return filePath.toString();

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É: {}", e.getMessage(), e);
            throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É", e);
        }
    }

    private void createExcelFile(List<Student> students, String filePath) throws IOException {
        Workbook workbook = null;
        FileOutputStream fileOut = null;

        try {
            // –°–æ–∑–¥–∞–µ–º workbook
            workbook = new XSSFWorkbook();
            log.debug("Workbook —Å–æ–∑–¥–∞–Ω");

            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel
            createExcelContent(workbook, students);
            log.debug("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel —Å–æ–∑–¥–∞–Ω–æ");

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            fileOut = new FileOutputStream(filePath);
            workbook.write(fileOut);
            log.debug("–§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –¥–∏—Å–∫: {}", filePath);

        } catch (IOException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º: {}", e.getMessage(), e);
            throw e;
        } catch (Exception e) {
            log.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {}", e.getMessage(), e);
            throw new IOException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ", e);
        } finally {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            try {
                if (fileOut != null) {
                    fileOut.flush();
                    fileOut.close();
                    log.debug("FileOutputStream –∑–∞–∫—Ä—ã—Ç");
                }
            } catch (IOException e) {
                log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ FileOutputStream: {}", e.getMessage());
            }

            try {
                if (workbook != null) {
                    workbook.close();
                    log.debug("Workbook –∑–∞–∫—Ä—ã—Ç");
                }
            } catch (IOException e) {
                log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Workbook: {}", e.getMessage());
            }
        }
    }

    private void createExcelContent(Workbook workbook, List<Student> students) {
        try {
            Sheet sheet = workbook.createSheet("–°—Ç—É–¥–µ–Ω—Ç—ã");
            log.debug("–õ–∏—Å—Ç —Å–æ–∑–¥–∞–Ω");

            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            createHeader(workbook, sheet);
            log.debug("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–∑–¥–∞–Ω");

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            fillData(sheet, students);
            log.debug("–î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–ª–æ–Ω–æ–∫
            autoSizeColumns(sheet);
            log.debug("–†–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Excel: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ", e);
        }
    }

    private void createHeader(Workbook workbook, Sheet sheet) {
        try {
            Row headerRow = sheet.createRow(0);
            String[] headers = {
                    "ID", "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–ö—É—Ä—Å", "–§–∞–∫—É–ª—å—Ç–µ—Ç",
                    "–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è", "–°—Ç–∏–ø–µ–Ω–¥–∏—è", "–ù–æ–º–µ—Ä –ø—Ä–∏–∫–∞–∑–∞",
                    "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã–¥–∞—á–∏", "–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è", "–û—Å–Ω–æ–≤–∞–Ω–∏–µ"
            };

            CellStyle headerStyle = createHeaderStyle(workbook);

            for (int i = 0; i < headers.length; i++) {
                try {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(headers[i]);
                    cell.setCellStyle(headerStyle);
                } catch (Exception e) {
                    log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è—á–µ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ {}: {}", i, e.getMessage());
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫
                }
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞", e);
        }
    }

    private CellStyle createHeaderStyle(Workbook workbook) {
        try {
            CellStyle headerStyle = workbook.createCellStyle();
            Font headerFont = workbook.createFont();
            headerFont.setBold(true);
            headerFont.setFontHeightInPoints((short) 12);
            headerStyle.setFont(headerFont);

            // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
            headerStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderTop(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);

            return headerStyle;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {}", e.getMessage(), e);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å
            return workbook.createCellStyle();
        }
    }

    private void fillData(Sheet sheet, List<Student> students) {
        try {
            int rowNum = 1;
            for (int i = 0; i < students.size(); i++) {
                try {
                    Student student = students.get(i);
                    if (student != null) {
                        Row row = sheet.createRow(rowNum++);
                        fillStudentRow(row, student);
                    } else {
                        log.warn("–°—Ç—É–¥–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º {} —Ä–∞–≤–µ–Ω null, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", i);
                    }
                } catch (Exception e) {
                    log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {}: {}", i, e.getMessage());
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                }
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", e);
        }
    }

    private void fillStudentRow(Row row, Student student) {
        try {
            int cellNum = 0;

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É
            safeSetCellValue(row, cellNum++, student.getId());
            safeSetCellValue(row, cellNum++, nullSafe(student.getLastName()));
            safeSetCellValue(row, cellNum++, nullSafe(student.getFirstName()));
            safeSetCellValue(row, cellNum++, nullSafe(student.getMiddleName()));
            safeSetCellValue(row, cellNum++, student.getCourse());
            safeSetCellValue(row, cellNum++,
                    student.getFaculty() != null ? student.getFaculty().getName() : "");
            safeSetCellValue(row, cellNum++,
                    student.getStudyForm() != null ? student.getStudyForm().getName() : "");
            safeSetCellValue(row, cellNum++,
                    student.getScholarship() != null ? student.getScholarship().getName() : "");
            safeSetCellValue(row, cellNum++, nullSafe(student.getOrderNumber()));
            safeSetCellValue(row, cellNum++,
                    student.getIssuanceEndDate() != null ? student.getIssuanceEndDate().toString() : "");

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è
            if (Boolean.TRUE.equals(student.getIsPermanent())) {
                safeSetCellValue(row, cellNum++, "–ë–µ—Å—Å—Ä–æ—á–Ω–æ");
            } else {
                safeSetCellValue(row, cellNum++,
                        student.getFoundationEndDate() != null ?
                                student.getFoundationEndDate().toString() : "");
            }

            safeSetCellValue(row, cellNum,
                    student.getFoundation() != null ? student.getFoundation().getName() : "");

        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ ID {}: {}",
                    student != null ? student.getId() : "null", e.getMessage());
        }
    }

    private void safeSetCellValue(Row row, int cellIndex, Object value) {
        try {
            Cell cell = row.createCell(cellIndex);
            if (value == null) {
                cell.setCellValue("");
            } else if (value instanceof Number) {
                cell.setCellValue(((Number) value).doubleValue());
            } else {
                cell.setCellValue(value.toString());
            }
        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏ [{}]: {}", cellIndex, e.getMessage());
        }
    }

    private void autoSizeColumns(Sheet sheet) {
        try {
            for (int i = 0; i < 12; i++) {
                try {
                    sheet.autoSizeColumn(i);
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏
                    if (sheet.getColumnWidth(i) > 6000) {
                        sheet.setColumnWidth(i, 6000);
                    }
                } catch (Exception e) {
                    log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª–æ–Ω–∫–∏ {}: {}", i, e.getMessage());
                }
            }
        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫: {}", e.getMessage());
        }
    }

    private void validateCreatedFile(String filePath) throws IOException {
        try {
            Path path = Paths.get(filePath);

            if (!Files.exists(path)) {
                throw new IOException("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: " + filePath);
            }

            long fileSize = Files.size(path);
            if (fileSize == 0) {
                throw new IOException("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª: " + filePath);
            }

            if (fileSize < 1024) { // –ú–µ–Ω–µ–µ 1KB - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–æ –¥–ª—è Excel —Ñ–∞–π–ª–∞
                log.warn("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª: {} –±–∞–π—Ç", fileSize);
            }

            log.debug("–§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é. –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", fileSize);

        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new IOException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: " + e.getMessage(), e);
        }
    }

    private void cleanupFile(String filePath) {
        if (filePath != null) {
            try {
                Path path = Paths.get(filePath);
                if (Files.exists(path)) {
                    Files.delete(path);
                    log.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {}", filePath);
                }
            } catch (Exception e) {
                log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {}: {}", filePath, e.getMessage());
            }
        }
    }

    private String nullSafe(String value) {
        return value != null ? value : "";
    }
}